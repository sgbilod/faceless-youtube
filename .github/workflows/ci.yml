name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    PYTHON_VERSION: "3.11"

jobs:
    # ============================================
    # LINTING & CODE QUALITY
    # ============================================
    lint:
        name: Lint Code
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install black ruff mypy

            - name: Run Black (Code Formatter)
              run: black --check src/ tests/

            - name: Run Ruff (Linter)
              run: ruff check src/ tests/

            - name: Run MyPy (Type Checker)
              run: mypy src/ --ignore-missing-imports

    # ============================================
    # UNIT & INTEGRATION TESTS
    # ============================================
    test:
        name: Run Tests
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_PASSWORD: test_password
                    POSTGRES_USER: test_user
                    POSTGRES_DB: test_db
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            mongodb:
                image: mongo:6
                ports:
                    - 27017:27017

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y ffmpeg

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run Unit Tests
              env:
                  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
                  REDIS_URL: redis://localhost:6379
                  MONGODB_URL: mongodb://localhost:27017
              run: |
                  pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

            - name: Run Integration Tests
              env:
                  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
                  REDIS_URL: redis://localhost:6379
                  MONGODB_URL: mongodb://localhost:27017
              run: |
                  pytest tests/integration/ -v

            - name: Upload Coverage Report
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    # ============================================
    # SECURITY SCANNING
    # ============================================
    security:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install safety bandit

            - name: Run Safety (Dependency Vulnerability Check)
              run: safety check --json
              continue-on-error: true

            - name: Run Bandit (Security Linter)
              run: bandit -r src/ -f json -o bandit-report.json
              continue-on-error: true

            - name: Upload Bandit Report
              uses: actions/upload-artifact@v3
              with:
                  name: bandit-report
                  path: bandit-report.json

    # ============================================
    # BUILD VERIFICATION
    # ============================================
    build:
        name: Build Verification
        runs-on: ubuntu-latest
        needs: [lint, test]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Verify imports
              run: python -c "import src; print('✅ Imports successful')"

            - name: Check for missing dependencies
              run: |
                  pip check

    # ============================================
    # NOTIFICATION (On Failure)
    # ============================================
    notify:
        name: Notify on Failure
        runs-on: ubuntu-latest
        needs: [lint, test, security, build]
        if: failure()

        steps:
            - name: Send Failure Notification
              run: |
                  echo "❌ CI/CD Pipeline failed!"
                  echo "Check the logs for details."
